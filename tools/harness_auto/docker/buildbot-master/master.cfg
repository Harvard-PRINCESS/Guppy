# -*- python -*-
# ex: set filetype=python:

import os

from buildbot.plugins import *

c = BuildmasterConfig = {}

####### WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.

c['workers'] = [worker.Worker("guppy-worker", 'pass')]

if 'BUILDBOT_MQ_URL' in os.environ:
    c['mq'] = {
        'type' : 'wamp',
        'router_url': os.environ['BUILDBOT_MQ_URL'],
        'realm': os.environ.get('BUILDBOT_MQ_REALM', 'buildbot').decode('utf-8'),
        'debug' : 'BUILDBOT_MQ_DEBUG' in os.environ,
        'debug_websockets' : 'BUILDBOT_MQ_DEBUG' in os.environ,
        'debug_lowlevel' : 'BUILDBOT_MQ_DEBUG' in os.environ,
    }
# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': os.environ.get("BUILDBOT_WORKER_PORT", 9989)}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

c['change_source'] = []
c['change_source'].append(changes.GitPoller(
        'git://github.com/Harvard-PRINCESS/Guppy.git',
        workdir='gitpoller-workdir', branch='ahp_buildbot_demo',
        pollinterval=60))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.

from buildbot.config import BuilderConfig
from buildbot.process.factory import BuildFactory
from buildbot.steps.shell import ShellCommand
from buildbot.steps.source.git import Git

c['builders'] = []

pipeline = [
    Git(name='fetch', mode='full',
        repourl='git://github.com/Harvard-PRINCESS/Guppy.git',
        branch='ahp_buildbot_demo', shallow=True, haltOnFailure=True),
    ShellCommand(name='build_dir', 
                 command=['mkdir', 'build'],
                 haltOnFailure=True),
    ShellCommand(name='hake', 
                 command=['../hake/hake.sh', '-s', '..', '-a',
                          'x86_64'],
                 haltOnFailure=True, workdir='build'),
    ShellCommand(name='make x86_64_basic', 
                 command=['make', '-j', '5', 'X86_64_Basic'],
                 haltOnFailure=True, workdir='build'),
]

factory  = util.BuildFactory(pipeline)
builder_name = 'guppy_build_ahp_buildbot_demo'
builder = util.BuilderConfig(name=builder_name, workernames=["guppy-worker"],
                             factory=factory)
c['builders'] = [builder]

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

c['schedulers'] = [
	schedulers.SingleBranchScheduler(name="ahp_buildbot_demo",
									 change_filter=util.ChangeFilter(branch='ahp_buildbot_demo'),
									 treeStableTimer=None,
									 builderNames=["guppy_build_ahp_buildbot_demo"]),
]


####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# like IRC bots.

from buildbot.reporters import mail

c['services'] = []

notifier = mail.MailNotifier(fromaddr="buildbot@nomnomnom",
                                    sendToInterestedUsers=False,
                                    extraRecipients=['patelalex02@gmail.com'])

c['services'].append(notifier)


####### PRuOJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = "Harvard-PRINCESS"
c['titleURL'] = "https://github.com/Harvard-PRINCESS"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = os.environ.get("BUILDBOT_WEB_URL", "http://localhost/")

# minimalistic config to activate new web UI
c['www'] = dict(port=os.environ.get("BUILDBOT_WEB_PORT", 8080),
                plugins=dict(waterfall_view={}, console_view={}))

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : os.environ.get("BUILDBOT_DB_URL", "sqlite://").format(**os.environ),
}
