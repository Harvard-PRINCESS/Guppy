--------------------------------------------------------------------------
-- Copyright (c) 2015-2016 ETH Zurich.
-- All rights reserved.
--
-- This file is distributed under the terms in the attached LICENSE file.
-- If you do not find this file, copies can be found by writing to:
-- ETH Zurich D-INFK, Universitaetstr. 6, CH-8092 Zurich. Attn: Systems Group.
--
-- Hakefile for /platforms/
--
--------------------------------------------------------------------------

let bin_rcce_lu = [ "/sbin/" ++ f | f <- [
                        "rcce_lu_A1",
                        "rcce_lu_A2",
                        "rcce_lu_A4",
                        "rcce_lu_A8",
                        "rcce_lu_A16",
                        "rcce_lu_A32",
                        "rcce_lu_A64" ]]

    bin_rcce_bt = [ "/sbin/" ++ f | f <- [
                        "rcce_bt_A1",
                        "rcce_bt_A4",
                        "rcce_bt_A9",
                        "rcce_bt_A16",
                        "rcce_bt_A25",
                        "rcce_bt_A36" ]]


    -- Default list of modules to build/install for all enabled architectures
    modules_common = [ "/sbin/" ++ f | f <- [
                          "init",
                          "simple-init",
                          "skb",
                          "spawnd",
                          "startd",
                          "mem_serv",
                          "monitor",
                          "ramfsd" ]]

    -- modules for examples
    modules_examples = [ "/sbin/" ++ f | f <- [
                          "examples",
                          "examples/xmpl-markhello" ]]                  

    -- List of modules that are arch-independent and always built
    modules_generic = [
        "/eclipseclp_ramfs.cpio.gz",
        "/skb_ramfs.cpio.gz",
        "/sshd_ramfs.cpio.gz" ]



    -- ARMv7 Min Pandaboard
    pandaModules_Min = [ "/sbin/" ++ f | f <- [
                        "cpu_omap44xx",
                        "init",
                        "mem_serv",
                        "monitor",
                        "ramfsd",
                        "spawnd",
                        "startd",
                        "skb",
                        "fish",
                        "serial_omap44xx",
                        "serial_kernel"
                        ] ]


 
    -- ARMv7-a Pandaboard modules
    pandaModules = [ "/sbin/" ++ f | f <- [
                        "cpu_omap44xx",
                        "init",
                        "mem_serv",
                        "monitor",
                        "ramfsd",
                        "spawnd",
                        "startd",
                        "skb",
                        "memtest",
                        "kaluga",
                        "fish",
                        "sdma",
                        "sdmatest",
                        "sdma_bench",
                        "bulk_sdma",
                        "usb_manager",
                        "usb_keyboard",
                        "serial_omap44xx",
                        "serial_kernel",
                        "angler",
                        "corectrl"
                        ] ] ++ modules_examples



    armv7Image target bootTarget cpuTarget physBase modules =
        let bootDriver = "/sbin/boot_" ++ bootTarget
            cpuDriver  = "/sbin/cpu_"  ++ cpuTarget
            image      = "/" ++ target ++ "_image"
        in Rules [
            Rule ([ In BuildTree "tools" "/bin/arm_bootimage",
                    In BuildTree "root" ("/platforms/arm/menu.lst."++target),
                    In BuildTree "armv7" bootDriver,
                    Out "root" image,
                    NoDep BuildTree "root" "/",
                    Str physBase ] ++
                    [ (Dep BuildTree "armv7" m) | m <- modules ] ++
                    [ (Dep BuildTree "" m) | m <- modules_generic ] ),

            Rule ([ Str Config.arm_objcopy,
                    Str "-O binary",
                    In BuildTree "root" image,
                    Out "root" (image ++ ".bin") ]),
            Rule ([ In SrcTree "tools" "/tools/arm_boot/gdb_script.sh",
                    Str Config.arm_objdump,
                    In BuildTree "root" image,
                    In BuildTree "armv7" bootDriver,
                    In BuildTree "armv7" cpuDriver,
                    Out "root" (image ++ "-gdb.gdb") ])
            ]
  in
 [
   --
   -- Rules to build platforms
   --


    platform "PandaboardES_Min" [ "armv7" ]
    ([ ("armv7", f) | f <- pandaModules ] ++
     [ ("root", "/armv7_omap44xx_Min_image"),
       ("root", "/armv7_omap44xx_Min_image-gdb.gdb") ])
    "Pandaboard ES Min build image and modules",


    platform "PandaboardES" [ "armv7" ]
    ([ ("armv7", f) | f <- pandaModules ] ++
     [ ("root", "/armv7_omap44xx_image"),
       ("root", "/armv7_omap44xx_image-gdb.gdb") ])
    "Standard Pandaboard ES build image and modules",


    --
    -- Rules to build boot images
    --
   
    -- Build the Min PandaBoard boot image
    armv7Image "armv7_omap44xx_Min" "omap44xx" "omap44xx" "0x80000000" pandaModules,

    -- Build the default PandaBoard boot image
    armv7Image "armv7_omap44xx" "omap44xx" "omap44xx" "0x80000000" pandaModules,


    --
    -- Booting:
    --

    -- Copy menu.list files across
    Rules [ copyFile SrcTree "root" ("/hake/menu.lst." ++ p)
                     "root" ("/platforms/arm/menu.lst." ++ p)
            | p <- [ "armv8_a57v",
                     "armv8_a57v_1",
                     "armv8_apm88xxxx",
                     "armv8_cn88xx",
                     "armv7_a9ve_1",
                     "armv7_a9ve_4",
                     "armv7_a15ve_1",
                     "armv7_a15ve_4",
                     "armv7_a15ve_fvp_1",
                     "armv7_a15ve_fvp_4",
                     "armv7_a15ve_gem5",
                     "armv7_a15a7ve",
                     "armv7_omap44xx",
                     "armv7_omap44xx_Min",
                     "armv7_zynq7" ]],
    Rules [ copyFile SrcTree "root" ("/hake/menu.lst." ++ p)
                     "root" ("/platforms/x86/menu.lst." ++ p)
            | p <- [ "x86_64", "k1om" ] ],


    boot "usbboot_panda_Min" [ "armv7" ] [
      In BuildTree "tools" "/bin/usbboot",
      In BuildTree "root" "/armv7_omap44xx_Min_image"
    ]
    "Boot Barrelfish Min Arm Build on a Pandaboard, over a local USB cable",
    
    boot "usbboot_panda" [ "armv7" ] [
      In BuildTree "tools" "/bin/usbboot",
      In BuildTree "root" "/armv7_omap44xx_image"
    ]
    "Boot Barrelfish on a Pandaboard, over a local USB cable"

 ]
